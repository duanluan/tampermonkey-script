/*! For license information please see main.js.LICENSE.txt */
(()=>{"use strict";function e(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var n=function(){function n(){!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n)}var t,r;return t=n,r=[{key:"getPath",value:function(e){e||(e=window.location.href);var n=window.location.host;return e.substring(e.indexOf(n)+n.length)}}],null&&e(t.prototype,null),r&&e(t,r),Object.defineProperty(t,"prototype",{writable:!1}),n}();function t(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var r,o=function(){function e(){!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,e)}var n,r;return n=e,r=[{key:"get",value:function(e){return GM_getValue(e)}},{key:"set",value:function(e,n){return GM_setValue(e,n)}}],null&&t(n.prototype,null),r&&t(n,r),Object.defineProperty(n,"prototype",{writable:!1}),e}();function a(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}!function(e){e.JSON=""}(r||(r={}));var i=function(){function e(){!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,e)}var n,t;return n=e,t=[{key:"get",value:function(e){GM_xmlhttpRequest({method:"GET",url:e.url,onload:function(n){var t=n.response;e.dataType===r.JSON&&(t=JSON.parse(n.response)),e.onload(t)}})}}],null&&a(n.prototype,null),t&&a(n,t),Object.defineProperty(n,"prototype",{writable:!1}),e}();function l(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var u,c,f='.sg-col-inner h2 a[href^="/dp/"]',s="serverUrl",p=o.get(s);function y(){(u=$(f)).each((function(e,n){var t=$(n),o=t.text().replace(/[（\\(【].*[）\\)】]|·|・/g,"").trim(),a=t.parent().next().text().replace(/[（\\(【].*[）\\)】]|·|・|, |、|。|等*/g,"").replace(/\s*\|\s*\d{4}-\d{2}/i,"").trim();console.log(o+" | "+a),i.get({url:p+"/douban/subjectSearch?name="+o+"&author="+a,dataType:r.JSON,onload:function(e){var n=e.code,r=(e.msg,e.data);if(200==n){console.log(e);var o,a=0,i=function(e,n){var t="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!t){if(Array.isArray(e)||(t=function(e,n){if(e){if("string"==typeof e)return l(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?l(e,n):void 0}}(e))||n&&e&&"number"==typeof e.length){t&&(e=t);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,u=!1;return{s:function(){t=t.call(e)},n:function(){var e=t.next();return i=e.done,e},e:function(e){u=!0,a=e},f:function(){try{i||null==t.return||t.return()}finally{if(u)throw a}}}}(r);try{for(i.s();!(o=i.n()).done;){var u=o.value;if(u.score){a=u.score;break}}}catch(e){i.e(e)}finally{i.f()}t.prepend('<span style="color: #071; font-weight: bolder; font-size: large">'.concat(a,"</span>&nbsp;&nbsp;"))}}})}))}(c=n.getPath()).startsWith("/s")&&-1!=c.indexOf("rh=n")&&(y(),function(e){e||(e=o.get(s)),e||o.set(s,window.prompt("请输入“亚马逊 Kindle 展示豆瓣评分”的服务地址：","http://localhost:8361"))}(p)),$(".s-pagination-strip a").on("click",document,(function(){var e=setTimeout((function(){u==$(f)||$(".s-pagination-item.s-pagination-selected").next(".s-pagination-item.s-pagination-button")&&16!=$(f).length||(y(),clearTimeout(e))}),500)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,